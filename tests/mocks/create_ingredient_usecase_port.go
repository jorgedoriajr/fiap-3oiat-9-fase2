// Code generated by mockery v2.32.3. DO NOT EDIT.

package mocks

import (
	context "context"
	command "hamburgueria/internal/modules/ingredient/usecase/command"

	mock "github.com/stretchr/testify/mock"

	result "hamburgueria/internal/modules/ingredient/usecase/result"
)

// CreateIngredientUseCasePort is an autogenerated mock type for the CreateIngredientUseCasePort type
type CreateIngredientUseCasePort struct {
	mock.Mock
}

// AddIngredient provides a mock function with given fields: ctx, _a1
func (_m *CreateIngredientUseCasePort) AddIngredient(ctx context.Context, _a1 command.CreateIngredientCommand) (result.CreateIngredientResult, error) {
	ret := _m.Called(ctx, _a1)

	var r0 result.CreateIngredientResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, command.CreateIngredientCommand) (result.CreateIngredientResult, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, command.CreateIngredientCommand) result.CreateIngredientResult); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(result.CreateIngredientResult)
	}

	if rf, ok := ret.Get(1).(func(context.Context, command.CreateIngredientCommand) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCreateIngredientUseCasePort creates a new instance of CreateIngredientUseCasePort. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCreateIngredientUseCasePort(t interface {
	mock.TestingT
	Cleanup(func())
}) *CreateIngredientUseCasePort {
	mock := &CreateIngredientUseCasePort{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
