// Code generated by mockery v2.32.3. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "hamburgueria/internal/modules/product/domain"

	mock "github.com/stretchr/testify/mock"
)

// ProductCategoryPersistencePort is an autogenerated mock type for the ProductCategoryPersistencePort type
type ProductCategoryPersistencePort struct {
	mock.Mock
}

// GetAll provides a mock function with given fields: ctx
func (_m *ProductCategoryPersistencePort) GetAll(ctx context.Context) ([]domain.ProductCategory, error) {
	ret := _m.Called(ctx)

	var r0 []domain.ProductCategory
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.ProductCategory, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.ProductCategory); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ProductCategory)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByName provides a mock function with given fields: ctx, category
func (_m *ProductCategoryPersistencePort) GetByName(ctx context.Context, category string) (*domain.ProductCategory, error) {
	ret := _m.Called(ctx, category)

	var r0 *domain.ProductCategory
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.ProductCategory, error)); ok {
		return rf(ctx, category)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.ProductCategory); ok {
		r0 = rf(ctx, category)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ProductCategory)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, category)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfig provides a mock function with given fields: ctx, name
func (_m *ProductCategoryPersistencePort) GetConfig(ctx context.Context, name string) (*domain.ProductCategory, error) {
	ret := _m.Called(ctx, name)

	var r0 *domain.ProductCategory
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.ProductCategory, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.ProductCategory); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ProductCategory)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewProductCategoryPersistencePort creates a new instance of ProductCategoryPersistencePort. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductCategoryPersistencePort(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductCategoryPersistencePort {
	mock := &ProductCategoryPersistencePort{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
