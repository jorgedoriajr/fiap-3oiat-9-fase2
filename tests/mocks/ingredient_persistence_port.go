// Code generated by mockery v2.32.3. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "hamburgueria/internal/modules/ingredient/domain"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// IngredientPersistencePort is an autogenerated mock type for the IngredientPersistencePort type
type IngredientPersistencePort struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, ingredient
func (_m *IngredientPersistencePort) Create(ctx context.Context, ingredient domain.Ingredient) error {
	ret := _m.Called(ctx, ingredient)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Ingredient) error); ok {
		r0 = rf(ctx, ingredient)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: ctx
func (_m *IngredientPersistencePort) GetAll(ctx context.Context) ([]domain.Ingredient, error) {
	ret := _m.Called(ctx)

	var r0 []domain.Ingredient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.Ingredient, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.Ingredient); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Ingredient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, ingredientID
func (_m *IngredientPersistencePort) GetByID(ctx context.Context, ingredientID uuid.UUID) (*domain.Ingredient, error) {
	ret := _m.Called(ctx, ingredientID)

	var r0 *domain.Ingredient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*domain.Ingredient, error)); ok {
		return rf(ctx, ingredientID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *domain.Ingredient); ok {
		r0 = rf(ctx, ingredientID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Ingredient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, ingredientID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByNumber provides a mock function with given fields: ctx, number
func (_m *IngredientPersistencePort) GetByNumber(ctx context.Context, number int) (*domain.Ingredient, error) {
	ret := _m.Called(ctx, number)

	var r0 *domain.Ingredient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*domain.Ingredient, error)); ok {
		return rf(ctx, number)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *domain.Ingredient); ok {
		r0 = rf(ctx, number)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Ingredient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, number)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByType provides a mock function with given fields: ctx, ingredientType
func (_m *IngredientPersistencePort) GetByType(ctx context.Context, ingredientType string) ([]domain.Ingredient, error) {
	ret := _m.Called(ctx, ingredientType)

	var r0 []domain.Ingredient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]domain.Ingredient, error)); ok {
		return rf(ctx, ingredientType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []domain.Ingredient); ok {
		r0 = rf(ctx, ingredientType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Ingredient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, ingredientType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIngredientPersistencePort creates a new instance of IngredientPersistencePort. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIngredientPersistencePort(t interface {
	mock.TestingT
	Cleanup(func())
}) *IngredientPersistencePort {
	mock := &IngredientPersistencePort{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
