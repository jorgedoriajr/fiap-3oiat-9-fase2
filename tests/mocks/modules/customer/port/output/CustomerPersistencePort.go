// Code generated by mockery v2.32.3. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "hamburgueria/internal/modules/customer/domain"

	mock "github.com/stretchr/testify/mock"
)

// CustomerPersistencePort is an autogenerated mock type for the CustomerPersistencePort type
type CustomerPersistencePort struct {
	mock.Mock
}

type CustomerPersistencePort_Expecter struct {
	mock *mock.Mock
}

func (_m *CustomerPersistencePort) EXPECT() *CustomerPersistencePort_Expecter {
	return &CustomerPersistencePort_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, customer
func (_m *CustomerPersistencePort) Create(ctx context.Context, customer domain.Customer) error {
	ret := _m.Called(ctx, customer)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Customer) error); ok {
		r0 = rf(ctx, customer)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CustomerPersistencePort_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type CustomerPersistencePort_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - customer domain.Customer
func (_e *CustomerPersistencePort_Expecter) Create(ctx interface{}, customer interface{}) *CustomerPersistencePort_Create_Call {
	return &CustomerPersistencePort_Create_Call{Call: _e.mock.On("Create", ctx, customer)}
}

func (_c *CustomerPersistencePort_Create_Call) Run(run func(ctx context.Context, customer domain.Customer)) *CustomerPersistencePort_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Customer))
	})
	return _c
}

func (_c *CustomerPersistencePort_Create_Call) Return(_a0 error) *CustomerPersistencePort_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CustomerPersistencePort_Create_Call) RunAndReturn(run func(context.Context, domain.Customer) error) *CustomerPersistencePort_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, document
func (_m *CustomerPersistencePort) Get(ctx context.Context, document string) (*domain.Customer, error) {
	ret := _m.Called(ctx, document)

	var r0 *domain.Customer
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.Customer, error)); ok {
		return rf(ctx, document)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Customer); ok {
		r0 = rf(ctx, document)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Customer)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, document)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CustomerPersistencePort_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type CustomerPersistencePort_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - document string
func (_e *CustomerPersistencePort_Expecter) Get(ctx interface{}, document interface{}) *CustomerPersistencePort_Get_Call {
	return &CustomerPersistencePort_Get_Call{Call: _e.mock.On("Get", ctx, document)}
}

func (_c *CustomerPersistencePort_Get_Call) Run(run func(ctx context.Context, document string)) *CustomerPersistencePort_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *CustomerPersistencePort_Get_Call) Return(_a0 *domain.Customer, _a1 error) *CustomerPersistencePort_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CustomerPersistencePort_Get_Call) RunAndReturn(run func(context.Context, string) (*domain.Customer, error)) *CustomerPersistencePort_Get_Call {
	_c.Call.Return(run)
	return _c
}

// NewCustomerPersistencePort creates a new instance of CustomerPersistencePort. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCustomerPersistencePort(t interface {
	mock.TestingT
	Cleanup(func())
}) *CustomerPersistencePort {
	mock := &CustomerPersistencePort{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
