// Code generated by mockery v2.32.3. DO NOT EDIT.

package mocks

import (
	context "context"
	command "hamburgueria/internal/modules/customer/usecase/command"

	mock "github.com/stretchr/testify/mock"
)

// CreateCustomerPort is an autogenerated mock type for the CreateCustomerPort type
type CreateCustomerPort struct {
	mock.Mock
}

type CreateCustomerPort_Expecter struct {
	mock *mock.Mock
}

func (_m *CreateCustomerPort) EXPECT() *CreateCustomerPort_Expecter {
	return &CreateCustomerPort_Expecter{mock: &_m.Mock}
}

// AddCustomer provides a mock function with given fields: ctx, createCustomerCommand
func (_m *CreateCustomerPort) AddCustomer(ctx context.Context, createCustomerCommand command.CreateCustomerCommand) error {
	ret := _m.Called(ctx, createCustomerCommand)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, command.CreateCustomerCommand) error); ok {
		r0 = rf(ctx, createCustomerCommand)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateCustomerPort_AddCustomer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddCustomer'
type CreateCustomerPort_AddCustomer_Call struct {
	*mock.Call
}

// AddCustomer is a helper method to define mock.On call
//   - ctx context.Context
//   - createCustomerCommand command.CreateCustomerCommand
func (_e *CreateCustomerPort_Expecter) AddCustomer(ctx interface{}, createCustomerCommand interface{}) *CreateCustomerPort_AddCustomer_Call {
	return &CreateCustomerPort_AddCustomer_Call{Call: _e.mock.On("AddCustomer", ctx, createCustomerCommand)}
}

func (_c *CreateCustomerPort_AddCustomer_Call) Run(run func(ctx context.Context, createCustomerCommand command.CreateCustomerCommand)) *CreateCustomerPort_AddCustomer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(command.CreateCustomerCommand))
	})
	return _c
}

func (_c *CreateCustomerPort_AddCustomer_Call) Return(_a0 error) *CreateCustomerPort_AddCustomer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CreateCustomerPort_AddCustomer_Call) RunAndReturn(run func(context.Context, command.CreateCustomerCommand) error) *CreateCustomerPort_AddCustomer_Call {
	_c.Call.Return(run)
	return _c
}

// NewCreateCustomerPort creates a new instance of CreateCustomerPort. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCreateCustomerPort(t interface {
	mock.TestingT
	Cleanup(func())
}) *CreateCustomerPort {
	mock := &CreateCustomerPort{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
