// Code generated by mockery v2.32.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	result "hamburgueria/internal/modules/customer/usecase/result"
)

// GetCustomerPort is an autogenerated mock type for the GetCustomerPort type
type GetCustomerPort struct {
	mock.Mock
}

type GetCustomerPort_Expecter struct {
	mock *mock.Mock
}

func (_m *GetCustomerPort) EXPECT() *GetCustomerPort_Expecter {
	return &GetCustomerPort_Expecter{mock: &_m.Mock}
}

// GetCustomer provides a mock function with given fields: ctx, document
func (_m *GetCustomerPort) GetCustomer(ctx context.Context, document string) (*result.CustomerCreated, error) {
	ret := _m.Called(ctx, document)

	var r0 *result.CustomerCreated
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*result.CustomerCreated, error)); ok {
		return rf(ctx, document)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *result.CustomerCreated); ok {
		r0 = rf(ctx, document)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*result.CustomerCreated)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, document)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomerPort_GetCustomer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCustomer'
type GetCustomerPort_GetCustomer_Call struct {
	*mock.Call
}

// GetCustomer is a helper method to define mock.On call
//   - ctx context.Context
//   - document string
func (_e *GetCustomerPort_Expecter) GetCustomer(ctx interface{}, document interface{}) *GetCustomerPort_GetCustomer_Call {
	return &GetCustomerPort_GetCustomer_Call{Call: _e.mock.On("GetCustomer", ctx, document)}
}

func (_c *GetCustomerPort_GetCustomer_Call) Run(run func(ctx context.Context, document string)) *GetCustomerPort_GetCustomer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *GetCustomerPort_GetCustomer_Call) Return(_a0 *result.CustomerCreated, _a1 error) *GetCustomerPort_GetCustomer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GetCustomerPort_GetCustomer_Call) RunAndReturn(run func(context.Context, string) (*result.CustomerCreated, error)) *GetCustomerPort_GetCustomer_Call {
	_c.Call.Return(run)
	return _c
}

// NewGetCustomerPort creates a new instance of GetCustomerPort. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGetCustomerPort(t interface {
	mock.TestingT
	Cleanup(func())
}) *GetCustomerPort {
	mock := &GetCustomerPort{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
