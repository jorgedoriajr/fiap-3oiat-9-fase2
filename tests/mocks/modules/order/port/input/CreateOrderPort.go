// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	context "context"
	command "hamburgueria/internal/modules/order/usecase/command"

	mock "github.com/stretchr/testify/mock"

	result "hamburgueria/internal/modules/order/usecase/result"
)

// CreateOrderPort is an autogenerated mock type for the CreateOrderPort type
type CreateOrderPort struct {
	mock.Mock
}

type CreateOrderPort_Expecter struct {
	mock *mock.Mock
}

func (_m *CreateOrderPort) EXPECT() *CreateOrderPort_Expecter {
	return &CreateOrderPort_Expecter{mock: &_m.Mock}
}

// AddOrder provides a mock function with given fields: ctx, createOrderCommand
func (_m *CreateOrderPort) AddOrder(ctx context.Context, createOrderCommand command.CreateOrderCommand) (*result.CreateOrderResult, error) {
	ret := _m.Called(ctx, createOrderCommand)

	if len(ret) == 0 {
		panic("no return value specified for AddOrder")
	}

	var r0 *result.CreateOrderResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, command.CreateOrderCommand) (*result.CreateOrderResult, error)); ok {
		return rf(ctx, createOrderCommand)
	}
	if rf, ok := ret.Get(0).(func(context.Context, command.CreateOrderCommand) *result.CreateOrderResult); ok {
		r0 = rf(ctx, createOrderCommand)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*result.CreateOrderResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, command.CreateOrderCommand) error); ok {
		r1 = rf(ctx, createOrderCommand)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOrderPort_AddOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddOrder'
type CreateOrderPort_AddOrder_Call struct {
	*mock.Call
}

// AddOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - createOrderCommand command.CreateOrderCommand
func (_e *CreateOrderPort_Expecter) AddOrder(ctx interface{}, createOrderCommand interface{}) *CreateOrderPort_AddOrder_Call {
	return &CreateOrderPort_AddOrder_Call{Call: _e.mock.On("AddOrder", ctx, createOrderCommand)}
}

func (_c *CreateOrderPort_AddOrder_Call) Run(run func(ctx context.Context, createOrderCommand command.CreateOrderCommand)) *CreateOrderPort_AddOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(command.CreateOrderCommand))
	})
	return _c
}

func (_c *CreateOrderPort_AddOrder_Call) Return(_a0 *result.CreateOrderResult, _a1 error) *CreateOrderPort_AddOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CreateOrderPort_AddOrder_Call) RunAndReturn(run func(context.Context, command.CreateOrderCommand) (*result.CreateOrderResult, error)) *CreateOrderPort_AddOrder_Call {
	_c.Call.Return(run)
	return _c
}

// NewCreateOrderPort creates a new instance of CreateOrderPort. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCreateOrderPort(t interface {
	mock.TestingT
	Cleanup(func())
}) *CreateOrderPort {
	mock := &CreateOrderPort{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
