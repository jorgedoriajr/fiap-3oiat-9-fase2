// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "hamburgueria/internal/modules/order/domain"

	mock "github.com/stretchr/testify/mock"

	result "hamburgueria/internal/modules/order/usecase/result"
)

// ProcessPaymentUseCasePort is an autogenerated mock type for the ProcessPaymentUseCasePort type
type ProcessPaymentUseCasePort struct {
	mock.Mock
}

type ProcessPaymentUseCasePort_Expecter struct {
	mock *mock.Mock
}

func (_m *ProcessPaymentUseCasePort) EXPECT() *ProcessPaymentUseCasePort_Expecter {
	return &ProcessPaymentUseCasePort_Expecter{mock: &_m.Mock}
}

// ProcessPayment provides a mock function with given fields: ctx, order
func (_m *ProcessPaymentUseCasePort) ProcessPayment(ctx context.Context, order domain.Order) (*result.PaymentCreatedResult, error) {
	ret := _m.Called(ctx, order)

	if len(ret) == 0 {
		panic("no return value specified for ProcessPayment")
	}

	var r0 *result.PaymentCreatedResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Order) (*result.PaymentCreatedResult, error)); ok {
		return rf(ctx, order)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.Order) *result.PaymentCreatedResult); ok {
		r0 = rf(ctx, order)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*result.PaymentCreatedResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.Order) error); ok {
		r1 = rf(ctx, order)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessPaymentUseCasePort_ProcessPayment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessPayment'
type ProcessPaymentUseCasePort_ProcessPayment_Call struct {
	*mock.Call
}

// ProcessPayment is a helper method to define mock.On call
//   - ctx context.Context
//   - order domain.Order
func (_e *ProcessPaymentUseCasePort_Expecter) ProcessPayment(ctx interface{}, order interface{}) *ProcessPaymentUseCasePort_ProcessPayment_Call {
	return &ProcessPaymentUseCasePort_ProcessPayment_Call{Call: _e.mock.On("ProcessPayment", ctx, order)}
}

func (_c *ProcessPaymentUseCasePort_ProcessPayment_Call) Run(run func(ctx context.Context, order domain.Order)) *ProcessPaymentUseCasePort_ProcessPayment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Order))
	})
	return _c
}

func (_c *ProcessPaymentUseCasePort_ProcessPayment_Call) Return(_a0 *result.PaymentCreatedResult, _a1 error) *ProcessPaymentUseCasePort_ProcessPayment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProcessPaymentUseCasePort_ProcessPayment_Call) RunAndReturn(run func(context.Context, domain.Order) (*result.PaymentCreatedResult, error)) *ProcessPaymentUseCasePort_ProcessPayment_Call {
	_c.Call.Return(run)
	return _c
}

// NewProcessPaymentUseCasePort creates a new instance of ProcessPaymentUseCasePort. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProcessPaymentUseCasePort(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProcessPaymentUseCasePort {
	mock := &ProcessPaymentUseCasePort{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
