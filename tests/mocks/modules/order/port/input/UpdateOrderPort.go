// Code generated by mockery v2.32.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"

	valueobject "hamburgueria/internal/modules/order/domain/valueobject"
)

// UpdateOrderPort is an autogenerated mock type for the UpdateOrderPort type
type UpdateOrderPort struct {
	mock.Mock
}

type UpdateOrderPort_Expecter struct {
	mock *mock.Mock
}

func (_m *UpdateOrderPort) EXPECT() *UpdateOrderPort_Expecter {
	return &UpdateOrderPort_Expecter{mock: &_m.Mock}
}

// Update provides a mock function with given fields: ctx, orderId, status, paymentId
func (_m *UpdateOrderPort) Update(ctx context.Context, orderId uuid.UUID, status valueobject.OrderStatus, paymentId *uuid.UUID) error {
	ret := _m.Called(ctx, orderId, status, paymentId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, valueobject.OrderStatus, *uuid.UUID) error); ok {
		r0 = rf(ctx, orderId, status, paymentId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateOrderPort_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type UpdateOrderPort_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - orderId uuid.UUID
//   - status valueobject.OrderStatus
//   - paymentId *uuid.UUID
func (_e *UpdateOrderPort_Expecter) Update(ctx interface{}, orderId interface{}, status interface{}, paymentId interface{}) *UpdateOrderPort_Update_Call {
	return &UpdateOrderPort_Update_Call{Call: _e.mock.On("Update", ctx, orderId, status, paymentId)}
}

func (_c *UpdateOrderPort_Update_Call) Run(run func(ctx context.Context, orderId uuid.UUID, status valueobject.OrderStatus, paymentId *uuid.UUID)) *UpdateOrderPort_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(valueobject.OrderStatus), args[3].(*uuid.UUID))
	})
	return _c
}

func (_c *UpdateOrderPort_Update_Call) Return(_a0 error) *UpdateOrderPort_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UpdateOrderPort_Update_Call) RunAndReturn(run func(context.Context, uuid.UUID, valueobject.OrderStatus, *uuid.UUID) error) *UpdateOrderPort_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewUpdateOrderPort creates a new instance of UpdateOrderPort. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUpdateOrderPort(t interface {
	mock.TestingT
	Cleanup(func())
}) *UpdateOrderPort {
	mock := &UpdateOrderPort{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
