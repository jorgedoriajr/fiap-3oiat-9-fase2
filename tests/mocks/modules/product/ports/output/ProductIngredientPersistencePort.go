// Code generated by mockery v2.32.3. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "hamburgueria/internal/modules/product/domain"

	mock "github.com/stretchr/testify/mock"
)

// ProductIngredientPersistencePort is an autogenerated mock type for the ProductIngredientPersistencePort type
type ProductIngredientPersistencePort struct {
	mock.Mock
}

type ProductIngredientPersistencePort_Expecter struct {
	mock *mock.Mock
}

func (_m *ProductIngredientPersistencePort) EXPECT() *ProductIngredientPersistencePort_Expecter {
	return &ProductIngredientPersistencePort_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, productIngredient
func (_m *ProductIngredientPersistencePort) Create(ctx context.Context, productIngredient domain.ProductIngredient) error {
	ret := _m.Called(ctx, productIngredient)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ProductIngredient) error); ok {
		r0 = rf(ctx, productIngredient)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProductIngredientPersistencePort_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type ProductIngredientPersistencePort_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - productIngredient domain.ProductIngredient
func (_e *ProductIngredientPersistencePort_Expecter) Create(ctx interface{}, productIngredient interface{}) *ProductIngredientPersistencePort_Create_Call {
	return &ProductIngredientPersistencePort_Create_Call{Call: _e.mock.On("Create", ctx, productIngredient)}
}

func (_c *ProductIngredientPersistencePort_Create_Call) Run(run func(ctx context.Context, productIngredient domain.ProductIngredient)) *ProductIngredientPersistencePort_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.ProductIngredient))
	})
	return _c
}

func (_c *ProductIngredientPersistencePort_Create_Call) Return(_a0 error) *ProductIngredientPersistencePort_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProductIngredientPersistencePort_Create_Call) RunAndReturn(run func(context.Context, domain.ProductIngredient) error) *ProductIngredientPersistencePort_Create_Call {
	_c.Call.Return(run)
	return _c
}

// NewProductIngredientPersistencePort creates a new instance of ProductIngredientPersistencePort. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductIngredientPersistencePort(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductIngredientPersistencePort {
	mock := &ProductIngredientPersistencePort{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
