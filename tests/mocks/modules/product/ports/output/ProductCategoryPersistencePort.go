// Code generated by mockery v2.32.3. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "hamburgueria/internal/modules/product/domain"

	mock "github.com/stretchr/testify/mock"
)

// ProductCategoryPersistencePort is an autogenerated mock type for the ProductCategoryPersistencePort type
type ProductCategoryPersistencePort struct {
	mock.Mock
}

type ProductCategoryPersistencePort_Expecter struct {
	mock *mock.Mock
}

func (_m *ProductCategoryPersistencePort) EXPECT() *ProductCategoryPersistencePort_Expecter {
	return &ProductCategoryPersistencePort_Expecter{mock: &_m.Mock}
}

// GetAll provides a mock function with given fields: ctx
func (_m *ProductCategoryPersistencePort) GetAll(ctx context.Context) ([]domain.ProductCategory, error) {
	ret := _m.Called(ctx)

	var r0 []domain.ProductCategory
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.ProductCategory, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.ProductCategory); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ProductCategory)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductCategoryPersistencePort_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type ProductCategoryPersistencePort_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ProductCategoryPersistencePort_Expecter) GetAll(ctx interface{}) *ProductCategoryPersistencePort_GetAll_Call {
	return &ProductCategoryPersistencePort_GetAll_Call{Call: _e.mock.On("GetAll", ctx)}
}

func (_c *ProductCategoryPersistencePort_GetAll_Call) Run(run func(ctx context.Context)) *ProductCategoryPersistencePort_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ProductCategoryPersistencePort_GetAll_Call) Return(_a0 []domain.ProductCategory, _a1 error) *ProductCategoryPersistencePort_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProductCategoryPersistencePort_GetAll_Call) RunAndReturn(run func(context.Context) ([]domain.ProductCategory, error)) *ProductCategoryPersistencePort_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetByName provides a mock function with given fields: ctx, category
func (_m *ProductCategoryPersistencePort) GetByName(ctx context.Context, category string) (*domain.ProductCategory, error) {
	ret := _m.Called(ctx, category)

	var r0 *domain.ProductCategory
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.ProductCategory, error)); ok {
		return rf(ctx, category)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.ProductCategory); ok {
		r0 = rf(ctx, category)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ProductCategory)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, category)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductCategoryPersistencePort_GetByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByName'
type ProductCategoryPersistencePort_GetByName_Call struct {
	*mock.Call
}

// GetByName is a helper method to define mock.On call
//   - ctx context.Context
//   - category string
func (_e *ProductCategoryPersistencePort_Expecter) GetByName(ctx interface{}, category interface{}) *ProductCategoryPersistencePort_GetByName_Call {
	return &ProductCategoryPersistencePort_GetByName_Call{Call: _e.mock.On("GetByName", ctx, category)}
}

func (_c *ProductCategoryPersistencePort_GetByName_Call) Run(run func(ctx context.Context, category string)) *ProductCategoryPersistencePort_GetByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ProductCategoryPersistencePort_GetByName_Call) Return(_a0 *domain.ProductCategory, _a1 error) *ProductCategoryPersistencePort_GetByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProductCategoryPersistencePort_GetByName_Call) RunAndReturn(run func(context.Context, string) (*domain.ProductCategory, error)) *ProductCategoryPersistencePort_GetByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetConfig provides a mock function with given fields: ctx, name
func (_m *ProductCategoryPersistencePort) GetConfig(ctx context.Context, name string) (*domain.ProductCategory, error) {
	ret := _m.Called(ctx, name)

	var r0 *domain.ProductCategory
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.ProductCategory, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.ProductCategory); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ProductCategory)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductCategoryPersistencePort_GetConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConfig'
type ProductCategoryPersistencePort_GetConfig_Call struct {
	*mock.Call
}

// GetConfig is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *ProductCategoryPersistencePort_Expecter) GetConfig(ctx interface{}, name interface{}) *ProductCategoryPersistencePort_GetConfig_Call {
	return &ProductCategoryPersistencePort_GetConfig_Call{Call: _e.mock.On("GetConfig", ctx, name)}
}

func (_c *ProductCategoryPersistencePort_GetConfig_Call) Run(run func(ctx context.Context, name string)) *ProductCategoryPersistencePort_GetConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ProductCategoryPersistencePort_GetConfig_Call) Return(_a0 *domain.ProductCategory, _a1 error) *ProductCategoryPersistencePort_GetConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProductCategoryPersistencePort_GetConfig_Call) RunAndReturn(run func(context.Context, string) (*domain.ProductCategory, error)) *ProductCategoryPersistencePort_GetConfig_Call {
	_c.Call.Return(run)
	return _c
}

// NewProductCategoryPersistencePort creates a new instance of ProductCategoryPersistencePort. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductCategoryPersistencePort(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductCategoryPersistencePort {
	mock := &ProductCategoryPersistencePort{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
