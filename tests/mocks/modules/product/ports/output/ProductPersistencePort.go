// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "hamburgueria/internal/modules/product/domain"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// ProductPersistencePort is an autogenerated mock type for the ProductPersistencePort type
type ProductPersistencePort struct {
	mock.Mock
}

type ProductPersistencePort_Expecter struct {
	mock *mock.Mock
}

func (_m *ProductPersistencePort) EXPECT() *ProductPersistencePort_Expecter {
	return &ProductPersistencePort_Expecter{mock: &_m.Mock}
}

// CheckProductExists provides a mock function with given fields: ctx, product
func (_m *ProductPersistencePort) CheckProductExists(ctx context.Context, product domain.Product) (*domain.Product, error) {
	ret := _m.Called(ctx, product)

	if len(ret) == 0 {
		panic("no return value specified for CheckProductExists")
	}

	var r0 *domain.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Product) (*domain.Product, error)); ok {
		return rf(ctx, product)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.Product) *domain.Product); ok {
		r0 = rf(ctx, product)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.Product) error); ok {
		r1 = rf(ctx, product)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductPersistencePort_CheckProductExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckProductExists'
type ProductPersistencePort_CheckProductExists_Call struct {
	*mock.Call
}

// CheckProductExists is a helper method to define mock.On call
//   - ctx context.Context
//   - product domain.Product
func (_e *ProductPersistencePort_Expecter) CheckProductExists(ctx interface{}, product interface{}) *ProductPersistencePort_CheckProductExists_Call {
	return &ProductPersistencePort_CheckProductExists_Call{Call: _e.mock.On("CheckProductExists", ctx, product)}
}

func (_c *ProductPersistencePort_CheckProductExists_Call) Run(run func(ctx context.Context, product domain.Product)) *ProductPersistencePort_CheckProductExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Product))
	})
	return _c
}

func (_c *ProductPersistencePort_CheckProductExists_Call) Return(_a0 *domain.Product, _a1 error) *ProductPersistencePort_CheckProductExists_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProductPersistencePort_CheckProductExists_Call) RunAndReturn(run func(context.Context, domain.Product) (*domain.Product, error)) *ProductPersistencePort_CheckProductExists_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, product
func (_m *ProductPersistencePort) Create(ctx context.Context, product domain.Product) error {
	ret := _m.Called(ctx, product)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Product) error); ok {
		r0 = rf(ctx, product)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProductPersistencePort_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type ProductPersistencePort_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - product domain.Product
func (_e *ProductPersistencePort_Expecter) Create(ctx interface{}, product interface{}) *ProductPersistencePort_Create_Call {
	return &ProductPersistencePort_Create_Call{Call: _e.mock.On("Create", ctx, product)}
}

func (_c *ProductPersistencePort_Create_Call) Run(run func(ctx context.Context, product domain.Product)) *ProductPersistencePort_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Product))
	})
	return _c
}

func (_c *ProductPersistencePort_Create_Call) Return(_a0 error) *ProductPersistencePort_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProductPersistencePort_Create_Call) RunAndReturn(run func(context.Context, domain.Product) error) *ProductPersistencePort_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields: ctx
func (_m *ProductPersistencePort) GetAll(ctx context.Context) ([]domain.Product, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []domain.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.Product, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.Product); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductPersistencePort_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type ProductPersistencePort_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ProductPersistencePort_Expecter) GetAll(ctx interface{}) *ProductPersistencePort_GetAll_Call {
	return &ProductPersistencePort_GetAll_Call{Call: _e.mock.On("GetAll", ctx)}
}

func (_c *ProductPersistencePort_GetAll_Call) Run(run func(ctx context.Context)) *ProductPersistencePort_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ProductPersistencePort_GetAll_Call) Return(_a0 []domain.Product, _a1 error) *ProductPersistencePort_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProductPersistencePort_GetAll_Call) RunAndReturn(run func(context.Context) ([]domain.Product, error)) *ProductPersistencePort_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetByCategory provides a mock function with given fields: ctx, productID
func (_m *ProductPersistencePort) GetByCategory(ctx context.Context, productID string) ([]domain.Product, error) {
	ret := _m.Called(ctx, productID)

	if len(ret) == 0 {
		panic("no return value specified for GetByCategory")
	}

	var r0 []domain.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]domain.Product, error)); ok {
		return rf(ctx, productID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []domain.Product); ok {
		r0 = rf(ctx, productID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductPersistencePort_GetByCategory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByCategory'
type ProductPersistencePort_GetByCategory_Call struct {
	*mock.Call
}

// GetByCategory is a helper method to define mock.On call
//   - ctx context.Context
//   - productID string
func (_e *ProductPersistencePort_Expecter) GetByCategory(ctx interface{}, productID interface{}) *ProductPersistencePort_GetByCategory_Call {
	return &ProductPersistencePort_GetByCategory_Call{Call: _e.mock.On("GetByCategory", ctx, productID)}
}

func (_c *ProductPersistencePort_GetByCategory_Call) Run(run func(ctx context.Context, productID string)) *ProductPersistencePort_GetByCategory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *ProductPersistencePort_GetByCategory_Call) Return(_a0 []domain.Product, _a1 error) *ProductPersistencePort_GetByCategory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProductPersistencePort_GetByCategory_Call) RunAndReturn(run func(context.Context, string) ([]domain.Product, error)) *ProductPersistencePort_GetByCategory_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, productID
func (_m *ProductPersistencePort) GetByID(ctx context.Context, productID uuid.UUID) (*domain.Product, error) {
	ret := _m.Called(ctx, productID)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *domain.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*domain.Product, error)); ok {
		return rf(ctx, productID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *domain.Product); ok {
		r0 = rf(ctx, productID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductPersistencePort_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type ProductPersistencePort_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - productID uuid.UUID
func (_e *ProductPersistencePort_Expecter) GetByID(ctx interface{}, productID interface{}) *ProductPersistencePort_GetByID_Call {
	return &ProductPersistencePort_GetByID_Call{Call: _e.mock.On("GetByID", ctx, productID)}
}

func (_c *ProductPersistencePort_GetByID_Call) Run(run func(ctx context.Context, productID uuid.UUID)) *ProductPersistencePort_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *ProductPersistencePort_GetByID_Call) Return(_a0 *domain.Product, _a1 error) *ProductPersistencePort_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProductPersistencePort_GetByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*domain.Product, error)) *ProductPersistencePort_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByNumber provides a mock function with given fields: ctx, productNumber
func (_m *ProductPersistencePort) GetByNumber(ctx context.Context, productNumber int) (*domain.Product, error) {
	ret := _m.Called(ctx, productNumber)

	if len(ret) == 0 {
		panic("no return value specified for GetByNumber")
	}

	var r0 *domain.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*domain.Product, error)); ok {
		return rf(ctx, productNumber)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *domain.Product); ok {
		r0 = rf(ctx, productNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, productNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProductPersistencePort_GetByNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByNumber'
type ProductPersistencePort_GetByNumber_Call struct {
	*mock.Call
}

// GetByNumber is a helper method to define mock.On call
//   - ctx context.Context
//   - productNumber int
func (_e *ProductPersistencePort_Expecter) GetByNumber(ctx interface{}, productNumber interface{}) *ProductPersistencePort_GetByNumber_Call {
	return &ProductPersistencePort_GetByNumber_Call{Call: _e.mock.On("GetByNumber", ctx, productNumber)}
}

func (_c *ProductPersistencePort_GetByNumber_Call) Run(run func(ctx context.Context, productNumber int)) *ProductPersistencePort_GetByNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *ProductPersistencePort_GetByNumber_Call) Return(_a0 *domain.Product, _a1 error) *ProductPersistencePort_GetByNumber_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ProductPersistencePort_GetByNumber_Call) RunAndReturn(run func(context.Context, int) (*domain.Product, error)) *ProductPersistencePort_GetByNumber_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, product
func (_m *ProductPersistencePort) Update(ctx context.Context, product domain.Product) error {
	ret := _m.Called(ctx, product)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Product) error); ok {
		r0 = rf(ctx, product)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProductPersistencePort_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type ProductPersistencePort_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - product domain.Product
func (_e *ProductPersistencePort_Expecter) Update(ctx interface{}, product interface{}) *ProductPersistencePort_Update_Call {
	return &ProductPersistencePort_Update_Call{Call: _e.mock.On("Update", ctx, product)}
}

func (_c *ProductPersistencePort_Update_Call) Run(run func(ctx context.Context, product domain.Product)) *ProductPersistencePort_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Product))
	})
	return _c
}

func (_c *ProductPersistencePort_Update_Call) Return(_a0 error) *ProductPersistencePort_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ProductPersistencePort_Update_Call) RunAndReturn(run func(context.Context, domain.Product) error) *ProductPersistencePort_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewProductPersistencePort creates a new instance of ProductPersistencePort. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductPersistencePort(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductPersistencePort {
	mock := &ProductPersistencePort{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
