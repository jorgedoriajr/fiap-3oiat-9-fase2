// Code generated by mockery v2.32.3. DO NOT EDIT.

package mocks

import (
	context "context"
	command "hamburgueria/internal/modules/product/usecase/command"

	mock "github.com/stretchr/testify/mock"

	result "hamburgueria/internal/modules/product/usecase/result"
)

// CreateProductUseCasePort is an autogenerated mock type for the CreateProductUseCasePort type
type CreateProductUseCasePort struct {
	mock.Mock
}

type CreateProductUseCasePort_Expecter struct {
	mock *mock.Mock
}

func (_m *CreateProductUseCasePort) EXPECT() *CreateProductUseCasePort_Expecter {
	return &CreateProductUseCasePort_Expecter{mock: &_m.Mock}
}

// AddProduct provides a mock function with given fields: ctx, _a1
func (_m *CreateProductUseCasePort) AddProduct(ctx context.Context, _a1 command.CreateProductCommand) (*result.ProductResult, error) {
	ret := _m.Called(ctx, _a1)

	var r0 *result.ProductResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, command.CreateProductCommand) (*result.ProductResult, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, command.CreateProductCommand) *result.ProductResult); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*result.ProductResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, command.CreateProductCommand) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProductUseCasePort_AddProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddProduct'
type CreateProductUseCasePort_AddProduct_Call struct {
	*mock.Call
}

// AddProduct is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 command.CreateProductCommand
func (_e *CreateProductUseCasePort_Expecter) AddProduct(ctx interface{}, _a1 interface{}) *CreateProductUseCasePort_AddProduct_Call {
	return &CreateProductUseCasePort_AddProduct_Call{Call: _e.mock.On("AddProduct", ctx, _a1)}
}

func (_c *CreateProductUseCasePort_AddProduct_Call) Run(run func(ctx context.Context, _a1 command.CreateProductCommand)) *CreateProductUseCasePort_AddProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(command.CreateProductCommand))
	})
	return _c
}

func (_c *CreateProductUseCasePort_AddProduct_Call) Return(_a0 *result.ProductResult, _a1 error) *CreateProductUseCasePort_AddProduct_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CreateProductUseCasePort_AddProduct_Call) RunAndReturn(run func(context.Context, command.CreateProductCommand) (*result.ProductResult, error)) *CreateProductUseCasePort_AddProduct_Call {
	_c.Call.Return(run)
	return _c
}

// NewCreateProductUseCasePort creates a new instance of CreateProductUseCasePort. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCreateProductUseCasePort(t interface {
	mock.TestingT
	Cleanup(func())
}) *CreateProductUseCasePort {
	mock := &CreateProductUseCasePort{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
