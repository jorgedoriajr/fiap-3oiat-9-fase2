// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	result "hamburgueria/internal/modules/product/usecase/result"

	uuid "github.com/google/uuid"
)

// FindProductUseCasePort is an autogenerated mock type for the FindProductUseCasePort type
type FindProductUseCasePort struct {
	mock.Mock
}

type FindProductUseCasePort_Expecter struct {
	mock *mock.Mock
}

func (_m *FindProductUseCasePort) EXPECT() *FindProductUseCasePort_Expecter {
	return &FindProductUseCasePort_Expecter{mock: &_m.Mock}
}

// FindAllProducts provides a mock function with given fields: ctx
func (_m *FindProductUseCasePort) FindAllProducts(ctx context.Context) ([]result.FindProductResult, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FindAllProducts")
	}

	var r0 []result.FindProductResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]result.FindProductResult, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []result.FindProductResult); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]result.FindProductResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindProductUseCasePort_FindAllProducts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAllProducts'
type FindProductUseCasePort_FindAllProducts_Call struct {
	*mock.Call
}

// FindAllProducts is a helper method to define mock.On call
//   - ctx context.Context
func (_e *FindProductUseCasePort_Expecter) FindAllProducts(ctx interface{}) *FindProductUseCasePort_FindAllProducts_Call {
	return &FindProductUseCasePort_FindAllProducts_Call{Call: _e.mock.On("FindAllProducts", ctx)}
}

func (_c *FindProductUseCasePort_FindAllProducts_Call) Run(run func(ctx context.Context)) *FindProductUseCasePort_FindAllProducts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *FindProductUseCasePort_FindAllProducts_Call) Return(_a0 []result.FindProductResult, _a1 error) *FindProductUseCasePort_FindAllProducts_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FindProductUseCasePort_FindAllProducts_Call) RunAndReturn(run func(context.Context) ([]result.FindProductResult, error)) *FindProductUseCasePort_FindAllProducts_Call {
	_c.Call.Return(run)
	return _c
}

// FindByCategory provides a mock function with given fields: ctx, category
func (_m *FindProductUseCasePort) FindByCategory(ctx context.Context, category string) ([]result.FindProductResult, error) {
	ret := _m.Called(ctx, category)

	if len(ret) == 0 {
		panic("no return value specified for FindByCategory")
	}

	var r0 []result.FindProductResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]result.FindProductResult, error)); ok {
		return rf(ctx, category)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []result.FindProductResult); ok {
		r0 = rf(ctx, category)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]result.FindProductResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, category)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindProductUseCasePort_FindByCategory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByCategory'
type FindProductUseCasePort_FindByCategory_Call struct {
	*mock.Call
}

// FindByCategory is a helper method to define mock.On call
//   - ctx context.Context
//   - category string
func (_e *FindProductUseCasePort_Expecter) FindByCategory(ctx interface{}, category interface{}) *FindProductUseCasePort_FindByCategory_Call {
	return &FindProductUseCasePort_FindByCategory_Call{Call: _e.mock.On("FindByCategory", ctx, category)}
}

func (_c *FindProductUseCasePort_FindByCategory_Call) Run(run func(ctx context.Context, category string)) *FindProductUseCasePort_FindByCategory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *FindProductUseCasePort_FindByCategory_Call) Return(_a0 []result.FindProductResult, _a1 error) *FindProductUseCasePort_FindByCategory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FindProductUseCasePort_FindByCategory_Call) RunAndReturn(run func(context.Context, string) ([]result.FindProductResult, error)) *FindProductUseCasePort_FindByCategory_Call {
	_c.Call.Return(run)
	return _c
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *FindProductUseCasePort) FindByID(ctx context.Context, id uuid.UUID) (*result.FindProductResult, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *result.FindProductResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*result.FindProductResult, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *result.FindProductResult); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*result.FindProductResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindProductUseCasePort_FindByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByID'
type FindProductUseCasePort_FindByID_Call struct {
	*mock.Call
}

// FindByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *FindProductUseCasePort_Expecter) FindByID(ctx interface{}, id interface{}) *FindProductUseCasePort_FindByID_Call {
	return &FindProductUseCasePort_FindByID_Call{Call: _e.mock.On("FindByID", ctx, id)}
}

func (_c *FindProductUseCasePort_FindByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *FindProductUseCasePort_FindByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *FindProductUseCasePort_FindByID_Call) Return(_a0 *result.FindProductResult, _a1 error) *FindProductUseCasePort_FindByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FindProductUseCasePort_FindByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*result.FindProductResult, error)) *FindProductUseCasePort_FindByID_Call {
	_c.Call.Return(run)
	return _c
}

// FindByNumber provides a mock function with given fields: ctx, number
func (_m *FindProductUseCasePort) FindByNumber(ctx context.Context, number int) (*result.FindProductResult, error) {
	ret := _m.Called(ctx, number)

	if len(ret) == 0 {
		panic("no return value specified for FindByNumber")
	}

	var r0 *result.FindProductResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*result.FindProductResult, error)); ok {
		return rf(ctx, number)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *result.FindProductResult); ok {
		r0 = rf(ctx, number)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*result.FindProductResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, number)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindProductUseCasePort_FindByNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByNumber'
type FindProductUseCasePort_FindByNumber_Call struct {
	*mock.Call
}

// FindByNumber is a helper method to define mock.On call
//   - ctx context.Context
//   - number int
func (_e *FindProductUseCasePort_Expecter) FindByNumber(ctx interface{}, number interface{}) *FindProductUseCasePort_FindByNumber_Call {
	return &FindProductUseCasePort_FindByNumber_Call{Call: _e.mock.On("FindByNumber", ctx, number)}
}

func (_c *FindProductUseCasePort_FindByNumber_Call) Run(run func(ctx context.Context, number int)) *FindProductUseCasePort_FindByNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *FindProductUseCasePort_FindByNumber_Call) Return(_a0 *result.FindProductResult, _a1 error) *FindProductUseCasePort_FindByNumber_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FindProductUseCasePort_FindByNumber_Call) RunAndReturn(run func(context.Context, int) (*result.FindProductResult, error)) *FindProductUseCasePort_FindByNumber_Call {
	_c.Call.Return(run)
	return _c
}

// NewFindProductUseCasePort creates a new instance of FindProductUseCasePort. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFindProductUseCasePort(t interface {
	mock.TestingT
	Cleanup(func())
}) *FindProductUseCasePort {
	mock := &FindProductUseCasePort{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
