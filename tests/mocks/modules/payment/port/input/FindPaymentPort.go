// Code generated by mockery v2.32.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	result "hamburgueria/internal/modules/payment/usecase/result"

	uuid "github.com/google/uuid"
)

// FindPaymentPort is an autogenerated mock type for the FindPaymentPort type
type FindPaymentPort struct {
	mock.Mock
}

type FindPaymentPort_Expecter struct {
	mock *mock.Mock
}

func (_m *FindPaymentPort) EXPECT() *FindPaymentPort_Expecter {
	return &FindPaymentPort_Expecter{mock: &_m.Mock}
}

// FindPaymentById provides a mock function with given fields: ctx, paymentId
func (_m *FindPaymentPort) FindPaymentById(ctx context.Context, paymentId uuid.UUID) (*result.PaymentProcessed, error) {
	ret := _m.Called(ctx, paymentId)

	var r0 *result.PaymentProcessed
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*result.PaymentProcessed, error)); ok {
		return rf(ctx, paymentId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *result.PaymentProcessed); ok {
		r0 = rf(ctx, paymentId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*result.PaymentProcessed)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, paymentId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindPaymentPort_FindPaymentById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindPaymentById'
type FindPaymentPort_FindPaymentById_Call struct {
	*mock.Call
}

// FindPaymentById is a helper method to define mock.On call
//   - ctx context.Context
//   - paymentId uuid.UUID
func (_e *FindPaymentPort_Expecter) FindPaymentById(ctx interface{}, paymentId interface{}) *FindPaymentPort_FindPaymentById_Call {
	return &FindPaymentPort_FindPaymentById_Call{Call: _e.mock.On("FindPaymentById", ctx, paymentId)}
}

func (_c *FindPaymentPort_FindPaymentById_Call) Run(run func(ctx context.Context, paymentId uuid.UUID)) *FindPaymentPort_FindPaymentById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *FindPaymentPort_FindPaymentById_Call) Return(_a0 *result.PaymentProcessed, _a1 error) *FindPaymentPort_FindPaymentById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FindPaymentPort_FindPaymentById_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*result.PaymentProcessed, error)) *FindPaymentPort_FindPaymentById_Call {
	_c.Call.Return(run)
	return _c
}

// NewFindPaymentPort creates a new instance of FindPaymentPort. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFindPaymentPort(t interface {
	mock.TestingT
	Cleanup(func())
}) *FindPaymentPort {
	mock := &FindPaymentPort{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
