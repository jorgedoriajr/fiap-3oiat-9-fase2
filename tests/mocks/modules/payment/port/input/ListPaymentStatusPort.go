// Code generated by mockery v2.32.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	result "hamburgueria/internal/modules/payment/usecase/result"

	uuid "github.com/google/uuid"
)

// ListPaymentStatusPort is an autogenerated mock type for the ListPaymentStatusPort type
type ListPaymentStatusPort struct {
	mock.Mock
}

type ListPaymentStatusPort_Expecter struct {
	mock *mock.Mock
}

func (_m *ListPaymentStatusPort) EXPECT() *ListPaymentStatusPort_Expecter {
	return &ListPaymentStatusPort_Expecter{mock: &_m.Mock}
}

// ListPaymentStatus provides a mock function with given fields: ctx, paymentStatusId
func (_m *ListPaymentStatusPort) ListPaymentStatus(ctx context.Context, paymentStatusId uuid.UUID) (*result.PaymentStatusProcessed, error) {
	ret := _m.Called(ctx, paymentStatusId)

	var r0 *result.PaymentStatusProcessed
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*result.PaymentStatusProcessed, error)); ok {
		return rf(ctx, paymentStatusId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *result.PaymentStatusProcessed); ok {
		r0 = rf(ctx, paymentStatusId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*result.PaymentStatusProcessed)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, paymentStatusId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPaymentStatusPort_ListPaymentStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPaymentStatus'
type ListPaymentStatusPort_ListPaymentStatus_Call struct {
	*mock.Call
}

// ListPaymentStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - paymentStatusId uuid.UUID
func (_e *ListPaymentStatusPort_Expecter) ListPaymentStatus(ctx interface{}, paymentStatusId interface{}) *ListPaymentStatusPort_ListPaymentStatus_Call {
	return &ListPaymentStatusPort_ListPaymentStatus_Call{Call: _e.mock.On("ListPaymentStatus", ctx, paymentStatusId)}
}

func (_c *ListPaymentStatusPort_ListPaymentStatus_Call) Run(run func(ctx context.Context, paymentStatusId uuid.UUID)) *ListPaymentStatusPort_ListPaymentStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *ListPaymentStatusPort_ListPaymentStatus_Call) Return(_a0 *result.PaymentStatusProcessed, _a1 error) *ListPaymentStatusPort_ListPaymentStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ListPaymentStatusPort_ListPaymentStatus_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*result.PaymentStatusProcessed, error)) *ListPaymentStatusPort_ListPaymentStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewListPaymentStatusPort creates a new instance of ListPaymentStatusPort. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewListPaymentStatusPort(t interface {
	mock.TestingT
	Cleanup(func())
}) *ListPaymentStatusPort {
	mock := &ListPaymentStatusPort{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
