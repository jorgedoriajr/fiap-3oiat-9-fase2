// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// PaymentPayPort is an autogenerated mock type for the PaymentPayPort type
type PaymentPayPort struct {
	mock.Mock
}

type PaymentPayPort_Expecter struct {
	mock *mock.Mock
}

func (_m *PaymentPayPort) EXPECT() *PaymentPayPort_Expecter {
	return &PaymentPayPort_Expecter{mock: &_m.Mock}
}

// Pay provides a mock function with given fields: paymentPayCommand
func (_m *PaymentPayPort) Pay(paymentPayCommand interface{}) (interface{}, error) {
	ret := _m.Called(paymentPayCommand)

	if len(ret) == 0 {
		panic("no return value specified for Pay")
	}

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}) (interface{}, error)); ok {
		return rf(paymentPayCommand)
	}
	if rf, ok := ret.Get(0).(func(interface{}) interface{}); ok {
		r0 = rf(paymentPayCommand)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(paymentPayCommand)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PaymentPayPort_Pay_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Pay'
type PaymentPayPort_Pay_Call struct {
	*mock.Call
}

// Pay is a helper method to define mock.On call
//   - paymentPayCommand interface{}
func (_e *PaymentPayPort_Expecter) Pay(paymentPayCommand interface{}) *PaymentPayPort_Pay_Call {
	return &PaymentPayPort_Pay_Call{Call: _e.mock.On("Pay", paymentPayCommand)}
}

func (_c *PaymentPayPort_Pay_Call) Run(run func(paymentPayCommand interface{})) *PaymentPayPort_Pay_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *PaymentPayPort_Pay_Call) Return(paymentPayResult interface{}, err error) *PaymentPayPort_Pay_Call {
	_c.Call.Return(paymentPayResult, err)
	return _c
}

func (_c *PaymentPayPort_Pay_Call) RunAndReturn(run func(interface{}) (interface{}, error)) *PaymentPayPort_Pay_Call {
	_c.Call.Return(run)
	return _c
}

// NewPaymentPayPort creates a new instance of PaymentPayPort. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPaymentPayPort(t interface {
	mock.TestingT
	Cleanup(func())
}) *PaymentPayPort {
	mock := &PaymentPayPort{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
