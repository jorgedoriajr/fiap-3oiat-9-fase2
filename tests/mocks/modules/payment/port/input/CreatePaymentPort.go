// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	context "context"
	command "hamburgueria/internal/modules/payment/usecase/command"

	mock "github.com/stretchr/testify/mock"

	result "hamburgueria/internal/modules/payment/usecase/result"
)

// CreatePaymentPort is an autogenerated mock type for the CreatePaymentPort type
type CreatePaymentPort struct {
	mock.Mock
}

type CreatePaymentPort_Expecter struct {
	mock *mock.Mock
}

func (_m *CreatePaymentPort) EXPECT() *CreatePaymentPort_Expecter {
	return &CreatePaymentPort_Expecter{mock: &_m.Mock}
}

// CreatePayment provides a mock function with given fields: ctx, _a1
func (_m *CreatePaymentPort) CreatePayment(ctx context.Context, _a1 command.CreatePaymentCommand) (*result.PaymentProcessed, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreatePayment")
	}

	var r0 *result.PaymentProcessed
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, command.CreatePaymentCommand) (*result.PaymentProcessed, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, command.CreatePaymentCommand) *result.PaymentProcessed); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*result.PaymentProcessed)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, command.CreatePaymentCommand) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePaymentPort_CreatePayment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePayment'
type CreatePaymentPort_CreatePayment_Call struct {
	*mock.Call
}

// CreatePayment is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 command.CreatePaymentCommand
func (_e *CreatePaymentPort_Expecter) CreatePayment(ctx interface{}, _a1 interface{}) *CreatePaymentPort_CreatePayment_Call {
	return &CreatePaymentPort_CreatePayment_Call{Call: _e.mock.On("CreatePayment", ctx, _a1)}
}

func (_c *CreatePaymentPort_CreatePayment_Call) Run(run func(ctx context.Context, _a1 command.CreatePaymentCommand)) *CreatePaymentPort_CreatePayment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(command.CreatePaymentCommand))
	})
	return _c
}

func (_c *CreatePaymentPort_CreatePayment_Call) Return(_a0 *result.PaymentProcessed, _a1 error) *CreatePaymentPort_CreatePayment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CreatePaymentPort_CreatePayment_Call) RunAndReturn(run func(context.Context, command.CreatePaymentCommand) (*result.PaymentProcessed, error)) *CreatePaymentPort_CreatePayment_Call {
	_c.Call.Return(run)
	return _c
}

// NewCreatePaymentPort creates a new instance of CreatePaymentPort. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCreatePaymentPort(t interface {
	mock.TestingT
	Cleanup(func())
}) *CreatePaymentPort {
	mock := &CreatePaymentPort{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
