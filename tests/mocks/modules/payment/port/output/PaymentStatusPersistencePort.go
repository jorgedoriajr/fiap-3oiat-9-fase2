// Code generated by mockery v2.32.3. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "hamburgueria/internal/modules/payment/domain"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// PaymentStatusPersistencePort is an autogenerated mock type for the PaymentStatusPersistencePort type
type PaymentStatusPersistencePort struct {
	mock.Mock
}

type PaymentStatusPersistencePort_Expecter struct {
	mock *mock.Mock
}

func (_m *PaymentStatusPersistencePort) EXPECT() *PaymentStatusPersistencePort_Expecter {
	return &PaymentStatusPersistencePort_Expecter{mock: &_m.Mock}
}

// CreatePaymentStatus provides a mock function with given fields: ctx, paymentStatus
func (_m *PaymentStatusPersistencePort) CreatePaymentStatus(ctx context.Context, paymentStatus domain.PaymentStatus) error {
	ret := _m.Called(ctx, paymentStatus)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.PaymentStatus) error); ok {
		r0 = rf(ctx, paymentStatus)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PaymentStatusPersistencePort_CreatePaymentStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePaymentStatus'
type PaymentStatusPersistencePort_CreatePaymentStatus_Call struct {
	*mock.Call
}

// CreatePaymentStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - paymentStatus domain.PaymentStatus
func (_e *PaymentStatusPersistencePort_Expecter) CreatePaymentStatus(ctx interface{}, paymentStatus interface{}) *PaymentStatusPersistencePort_CreatePaymentStatus_Call {
	return &PaymentStatusPersistencePort_CreatePaymentStatus_Call{Call: _e.mock.On("CreatePaymentStatus", ctx, paymentStatus)}
}

func (_c *PaymentStatusPersistencePort_CreatePaymentStatus_Call) Run(run func(ctx context.Context, paymentStatus domain.PaymentStatus)) *PaymentStatusPersistencePort_CreatePaymentStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.PaymentStatus))
	})
	return _c
}

func (_c *PaymentStatusPersistencePort_CreatePaymentStatus_Call) Return(_a0 error) *PaymentStatusPersistencePort_CreatePaymentStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PaymentStatusPersistencePort_CreatePaymentStatus_Call) RunAndReturn(run func(context.Context, domain.PaymentStatus) error) *PaymentStatusPersistencePort_CreatePaymentStatus_Call {
	_c.Call.Return(run)
	return _c
}

// FindPaymentStatus provides a mock function with given fields: ctx, paymentStatusId
func (_m *PaymentStatusPersistencePort) FindPaymentStatus(ctx context.Context, paymentStatusId uuid.UUID) (*domain.PaymentStatus, error) {
	ret := _m.Called(ctx, paymentStatusId)

	var r0 *domain.PaymentStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*domain.PaymentStatus, error)); ok {
		return rf(ctx, paymentStatusId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *domain.PaymentStatus); ok {
		r0 = rf(ctx, paymentStatusId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.PaymentStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, paymentStatusId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PaymentStatusPersistencePort_FindPaymentStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindPaymentStatus'
type PaymentStatusPersistencePort_FindPaymentStatus_Call struct {
	*mock.Call
}

// FindPaymentStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - paymentStatusId uuid.UUID
func (_e *PaymentStatusPersistencePort_Expecter) FindPaymentStatus(ctx interface{}, paymentStatusId interface{}) *PaymentStatusPersistencePort_FindPaymentStatus_Call {
	return &PaymentStatusPersistencePort_FindPaymentStatus_Call{Call: _e.mock.On("FindPaymentStatus", ctx, paymentStatusId)}
}

func (_c *PaymentStatusPersistencePort_FindPaymentStatus_Call) Run(run func(ctx context.Context, paymentStatusId uuid.UUID)) *PaymentStatusPersistencePort_FindPaymentStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *PaymentStatusPersistencePort_FindPaymentStatus_Call) Return(_a0 *domain.PaymentStatus, _a1 error) *PaymentStatusPersistencePort_FindPaymentStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PaymentStatusPersistencePort_FindPaymentStatus_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*domain.PaymentStatus, error)) *PaymentStatusPersistencePort_FindPaymentStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewPaymentStatusPersistencePort creates a new instance of PaymentStatusPersistencePort. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPaymentStatusPersistencePort(t interface {
	mock.TestingT
	Cleanup(func())
}) *PaymentStatusPersistencePort {
	mock := &PaymentStatusPersistencePort{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
