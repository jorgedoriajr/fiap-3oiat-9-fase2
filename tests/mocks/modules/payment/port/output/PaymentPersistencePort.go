// Code generated by mockery v2.32.3. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "hamburgueria/internal/modules/payment/domain"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// PaymentPersistencePort is an autogenerated mock type for the PaymentPersistencePort type
type PaymentPersistencePort struct {
	mock.Mock
}

type PaymentPersistencePort_Expecter struct {
	mock *mock.Mock
}

func (_m *PaymentPersistencePort) EXPECT() *PaymentPersistencePort_Expecter {
	return &PaymentPersistencePort_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, payment
func (_m *PaymentPersistencePort) Create(ctx context.Context, payment domain.Payment) error {
	ret := _m.Called(ctx, payment)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Payment) error); ok {
		r0 = rf(ctx, payment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PaymentPersistencePort_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type PaymentPersistencePort_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - payment domain.Payment
func (_e *PaymentPersistencePort_Expecter) Create(ctx interface{}, payment interface{}) *PaymentPersistencePort_Create_Call {
	return &PaymentPersistencePort_Create_Call{Call: _e.mock.On("Create", ctx, payment)}
}

func (_c *PaymentPersistencePort_Create_Call) Run(run func(ctx context.Context, payment domain.Payment)) *PaymentPersistencePort_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(domain.Payment))
	})
	return _c
}

func (_c *PaymentPersistencePort_Create_Call) Return(_a0 error) *PaymentPersistencePort_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PaymentPersistencePort_Create_Call) RunAndReturn(run func(context.Context, domain.Payment) error) *PaymentPersistencePort_Create_Call {
	_c.Call.Return(run)
	return _c
}

// FindById provides a mock function with given fields: ctx, paymentId
func (_m *PaymentPersistencePort) FindById(ctx context.Context, paymentId uuid.UUID) (*domain.Payment, error) {
	ret := _m.Called(ctx, paymentId)

	var r0 *domain.Payment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*domain.Payment, error)); ok {
		return rf(ctx, paymentId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *domain.Payment); ok {
		r0 = rf(ctx, paymentId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Payment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, paymentId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PaymentPersistencePort_FindById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindById'
type PaymentPersistencePort_FindById_Call struct {
	*mock.Call
}

// FindById is a helper method to define mock.On call
//   - ctx context.Context
//   - paymentId uuid.UUID
func (_e *PaymentPersistencePort_Expecter) FindById(ctx interface{}, paymentId interface{}) *PaymentPersistencePort_FindById_Call {
	return &PaymentPersistencePort_FindById_Call{Call: _e.mock.On("FindById", ctx, paymentId)}
}

func (_c *PaymentPersistencePort_FindById_Call) Run(run func(ctx context.Context, paymentId uuid.UUID)) *PaymentPersistencePort_FindById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *PaymentPersistencePort_FindById_Call) Return(_a0 *domain.Payment, _a1 error) *PaymentPersistencePort_FindById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PaymentPersistencePort_FindById_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*domain.Payment, error)) *PaymentPersistencePort_FindById_Call {
	_c.Call.Return(run)
	return _c
}

// NewPaymentPersistencePort creates a new instance of PaymentPersistencePort. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPaymentPersistencePort(t interface {
	mock.TestingT
	Cleanup(func())
}) *PaymentPersistencePort {
	mock := &PaymentPersistencePort{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
