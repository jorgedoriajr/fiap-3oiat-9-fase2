// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	context "context"
	command "hamburgueria/internal/modules/ingredient/usecase/command"

	mock "github.com/stretchr/testify/mock"

	result "hamburgueria/internal/modules/ingredient/usecase/result"
)

// CreateIngredientUseCasePort is an autogenerated mock type for the CreateIngredientUseCasePort type
type CreateIngredientUseCasePort struct {
	mock.Mock
}

type CreateIngredientUseCasePort_Expecter struct {
	mock *mock.Mock
}

func (_m *CreateIngredientUseCasePort) EXPECT() *CreateIngredientUseCasePort_Expecter {
	return &CreateIngredientUseCasePort_Expecter{mock: &_m.Mock}
}

// AddIngredient provides a mock function with given fields: ctx, _a1
func (_m *CreateIngredientUseCasePort) AddIngredient(ctx context.Context, _a1 command.CreateIngredientCommand) (*result.CreateIngredientResult, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for AddIngredient")
	}

	var r0 *result.CreateIngredientResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, command.CreateIngredientCommand) (*result.CreateIngredientResult, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, command.CreateIngredientCommand) *result.CreateIngredientResult); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*result.CreateIngredientResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, command.CreateIngredientCommand) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateIngredientUseCasePort_AddIngredient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddIngredient'
type CreateIngredientUseCasePort_AddIngredient_Call struct {
	*mock.Call
}

// AddIngredient is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 command.CreateIngredientCommand
func (_e *CreateIngredientUseCasePort_Expecter) AddIngredient(ctx interface{}, _a1 interface{}) *CreateIngredientUseCasePort_AddIngredient_Call {
	return &CreateIngredientUseCasePort_AddIngredient_Call{Call: _e.mock.On("AddIngredient", ctx, _a1)}
}

func (_c *CreateIngredientUseCasePort_AddIngredient_Call) Run(run func(ctx context.Context, _a1 command.CreateIngredientCommand)) *CreateIngredientUseCasePort_AddIngredient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(command.CreateIngredientCommand))
	})
	return _c
}

func (_c *CreateIngredientUseCasePort_AddIngredient_Call) Return(_a0 *result.CreateIngredientResult, _a1 error) *CreateIngredientUseCasePort_AddIngredient_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *CreateIngredientUseCasePort_AddIngredient_Call) RunAndReturn(run func(context.Context, command.CreateIngredientCommand) (*result.CreateIngredientResult, error)) *CreateIngredientUseCasePort_AddIngredient_Call {
	_c.Call.Return(run)
	return _c
}

// NewCreateIngredientUseCasePort creates a new instance of CreateIngredientUseCasePort. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCreateIngredientUseCasePort(t interface {
	mock.TestingT
	Cleanup(func())
}) *CreateIngredientUseCasePort {
	mock := &CreateIngredientUseCasePort{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
