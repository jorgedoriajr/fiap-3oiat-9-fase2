// Code generated by mockery v2.32.3. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "hamburgueria/internal/modules/order/domain"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// OrderPersistencePort is an autogenerated mock type for the OrderPersistencePort type
type OrderPersistencePort struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, order
func (_m *OrderPersistencePort) Create(ctx context.Context, order domain.Order) error {
	ret := _m.Called(ctx, order)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Order) error); ok {
		r0 = rf(ctx, order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: ctx
func (_m *OrderPersistencePort) FindAll(ctx context.Context) ([]domain.Order, error) {
	ret := _m.Called(ctx)

	var r0 []domain.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]domain.Order, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []domain.Order); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: ctx, orderId
func (_m *OrderPersistencePort) FindById(ctx context.Context, orderId uuid.UUID) (*domain.Order, error) {
	ret := _m.Called(ctx, orderId)

	var r0 *domain.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*domain.Order, error)); ok {
		return rf(ctx, orderId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *domain.Order); ok {
		r0 = rf(ctx, orderId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, orderId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByStatus provides a mock function with given fields: ctx, status
func (_m *OrderPersistencePort) FindByStatus(ctx context.Context, status string) ([]domain.Order, error) {
	ret := _m.Called(ctx, status)

	var r0 []domain.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]domain.Order, error)); ok {
		return rf(ctx, status)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []domain.Order); ok {
		r0 = rf(ctx, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, order
func (_m *OrderPersistencePort) Update(ctx context.Context, order domain.Order) error {
	ret := _m.Called(ctx, order)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Order) error); ok {
		r0 = rf(ctx, order)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewOrderPersistencePort creates a new instance of OrderPersistencePort. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderPersistencePort(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderPersistencePort {
	mock := &OrderPersistencePort{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
