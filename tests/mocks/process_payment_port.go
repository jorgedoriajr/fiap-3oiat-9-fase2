// Code generated by mockery v2.32.3. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "hamburgueria/internal/modules/order/domain"

	mock "github.com/stretchr/testify/mock"

	result "hamburgueria/internal/modules/order/usecase/result"
)

// ProcessPaymentUseCasePort is an autogenerated mock type for the ProcessPaymentUseCasePort type
type ProcessPaymentUseCasePort struct {
	mock.Mock
}

// ProcessPayment provides a mock function with given fields: ctx, order
func (_m *ProcessPaymentUseCasePort) ProcessPayment(ctx context.Context, order domain.Order) (*result.PaymentCreatedResult, error) {
	ret := _m.Called(ctx, order)

	var r0 *result.PaymentCreatedResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Order) (*result.PaymentCreatedResult, error)); ok {
		return rf(ctx, order)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.Order) *result.PaymentCreatedResult); ok {
		r0 = rf(ctx, order)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*result.PaymentCreatedResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.Order) error); ok {
		r1 = rf(ctx, order)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewProcessPaymentUseCasePort creates a new instance of ProcessPaymentUseCasePort. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProcessPaymentUseCasePort(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProcessPaymentUseCasePort {
	mock := &ProcessPaymentUseCasePort{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
