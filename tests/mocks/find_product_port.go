// Code generated by mockery v2.32.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	result "hamburgueria/internal/modules/product/usecase/result"

	uuid "github.com/google/uuid"
)

// FindProductUseCasePort is an autogenerated mock type for the FindProductUseCasePort type
type FindProductUseCasePort struct {
	mock.Mock
}

// FindAllProducts provides a mock function with given fields: ctx
func (_m *FindProductUseCasePort) FindAllProducts(ctx context.Context) ([]result.FindProductResult, error) {
	ret := _m.Called(ctx)

	var r0 []result.FindProductResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]result.FindProductResult, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []result.FindProductResult); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]result.FindProductResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByCategory provides a mock function with given fields: ctx, category
func (_m *FindProductUseCasePort) FindByCategory(ctx context.Context, category string) ([]result.FindProductResult, error) {
	ret := _m.Called(ctx, category)

	var r0 []result.FindProductResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]result.FindProductResult, error)); ok {
		return rf(ctx, category)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []result.FindProductResult); ok {
		r0 = rf(ctx, category)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]result.FindProductResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, category)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *FindProductUseCasePort) FindByID(ctx context.Context, id uuid.UUID) (*result.FindProductResult, error) {
	ret := _m.Called(ctx, id)

	var r0 *result.FindProductResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*result.FindProductResult, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *result.FindProductResult); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*result.FindProductResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByNumber provides a mock function with given fields: ctx, number
func (_m *FindProductUseCasePort) FindByNumber(ctx context.Context, number int) (*result.FindProductResult, error) {
	ret := _m.Called(ctx, number)

	var r0 *result.FindProductResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*result.FindProductResult, error)); ok {
		return rf(ctx, number)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *result.FindProductResult); ok {
		r0 = rf(ctx, number)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*result.FindProductResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, number)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewFindProductUseCasePort creates a new instance of FindProductUseCasePort. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFindProductUseCasePort(t interface {
	mock.TestingT
	Cleanup(func())
}) *FindProductUseCasePort {
	mock := &FindProductUseCasePort{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
