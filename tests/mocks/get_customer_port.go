// Code generated by mockery v2.32.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	response "hamburgueria/internal/modules/customer/domain/response"
)

// GetCustomerPort is an autogenerated mock type for the GetCustomerPort type
type GetCustomerPort struct {
	mock.Mock
}

// GetCustomer provides a mock function with given fields: ctx, document
func (_m *GetCustomerPort) GetCustomer(ctx context.Context, document string) (*response.CustomerResponse, error) {
	ret := _m.Called(ctx, document)

	var r0 *response.CustomerResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*response.CustomerResponse, error)); ok {
		return rf(ctx, document)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *response.CustomerResponse); ok {
		r0 = rf(ctx, document)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*response.CustomerResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, document)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewGetCustomerPort creates a new instance of GetCustomerPort. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGetCustomerPort(t interface {
	mock.TestingT
	Cleanup(func())
}) *GetCustomerPort {
	mock := &GetCustomerPort{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
