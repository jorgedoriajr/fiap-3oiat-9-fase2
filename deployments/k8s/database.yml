apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-script
  namespace: default
data:
  setup-postgresql-databases.sh: |
    #!/bin/bash
    echo "Executando script de configuração do PostgreSQL"
    set -e
    set -u
    
    function create_user_and_database() {
      local dbname=$1;
      local username=$dbname;
      local applicationUser="$username-app";
      local applicationReadUser="$username-app-read";
      local applicationWriteUser="$username-app-write";
      local migrationUser="$username-migration";
      local schema=$2;
      echo "  Creating database '$dbname' with schema '$schema' and user ['$applicationReadUser', '$applicationWriteUser', '$migrationUser']"
    
      psql -v ON_ERROR_STOP=1 --username "postgres" <<-EOSQL
      CREATE ROLE "$username";
      CREATE DATABASE "$dbname" WITH OWNER '$username';
      GRANT ALL PRIVILEGES ON DATABASE "$dbname" TO "$username";
    
      CREATE USER "$applicationUser" WITH PASSWORD '$applicationUser';
      GRANT CONNECT ON DATABASE "$dbname" TO "$applicationUser";
      GRANT "$username" TO "$applicationUser";
    
      CREATE USER "$applicationReadUser" WITH PASSWORD '$applicationReadUser';
      GRANT CONNECT ON DATABASE "$dbname" TO "$applicationReadUser";
      GRANT "$username" TO "$applicationReadUser";
    
      CREATE USER "$applicationWriteUser" WITH PASSWORD '$applicationWriteUser';
      GRANT CONNECT ON DATABASE "$dbname" TO "$applicationWriteUser";
      GRANT "$username" TO "$applicationWriteUser";
    
      CREATE USER "$migrationUser" WITH PASSWORD '$migrationUser';
      GRANT CONNECT ON DATABASE "$dbname" TO "$migrationUser";
      GRANT "$username" TO "$migrationUser";
    EOSQL
    
      psql -v ON_ERROR_STOP=1 --username "postgres" -d "$dbname"<<-EOSQL
      CREATE SCHEMA "$schema" AUTHORIZATION "$username";
      CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA public;
      ALTER ROLE "$username" SET search_path TO "$schema", public;
      ALTER ROLE "$applicationUser" SET search_path TO "$schema", public;
      ALTER ROLE "$applicationReadUser" SET search_path TO "$schema", public;
      ALTER ROLE "$applicationWriteUser" SET search_path TO "$schema", public;
      ALTER ROLE "$migrationUser" SET search_path TO "$schema", public;
    EOSQL
    }
    
    create_user_and_database "hamburgueria" "hamburgueria"
---

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---

apiVersion: v1
kind: PersistentVolume
metadata:
  name: local-storage
spec:
  storageClassName: manual
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/mnt/data"
    type: DirectoryOrCreate
---

apiVersion: v1
kind: Secret
metadata:
  name: database-secret-config
type: Opaque
data:
  dbname: aGFtYnVyZ3Vlcmlh
  username: aGFtYnVyZ3VlcmlhLWFwcA==
  password: aGFtYnVyZ3VlcmlhLWFwcA==
  password-write: aGFtYnVyZ3VlcmlhLWFwcC13cml0ZQ==
  password-read: aGFtYnVyZ3VlcmlhLWFwcC1yZWFk
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
spec:
  selector:
    matchLabels:
      app: postgres
  replicas: 1
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:15-alpine3.16
          imagePullPolicy: "IfNotPresent"
          livenessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - postgres
            initialDelaySeconds: 30
            periodSeconds: 10
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_DB
              value: postgres
            - name: POSTGRES_USER
              value: postgres
            - name: POSTGRES_PASSWORD
              value: password
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: postgresdb
            - mountPath: /docker-entrypoint-initdb.d
              name: init-script
      volumes:
        - name: postgresdb
          persistentVolumeClaim:
            claimName: postgres-pvc
        - name: init-script
          configMap:
            name: postgres-init-script
---

kind: Service
apiVersion: v1
metadata:
  name: postgres
spec:
  selector:
    app: postgres
  ports:
    - port: 5432
  type: ClusterIP